module VerifyExamples.Compiler exposing (compile)

import String
import String.Util exposing (escape, indent, unlines)
import VerifyExamples.Function as Function exposing (Function)
import VerifyExamples.ModuleName as ModuleName exposing (ModuleName)
import VerifyExamples.Test as Test exposing (Test)
import VerifyExamples.TestSuite as TestSuite exposing (TestSuite)


compile : ModuleName -> TestSuite -> List ( ModuleName, String )
compile moduleName suite =
    if TestSuite.notSpecial suite then
        [ ( moduleName
          , [ moduleHeader suite moduleName
            , imports suite moduleName
            , suite.tests
                |> List.indexedMap spec
                |> List.concat
                |> todoIfEmpty moduleName
            ]
                |> List.concat
                |> unlines
          )
        ]
    else
        List.indexedMap (compileTestPerFunction moduleName suite) suite.tests


compileTestPerFunction : ModuleName -> TestSuite -> Int -> Test -> ( ModuleName, String )
compileTestPerFunction moduleName suite index test =
    ( ModuleName.extendName moduleName (Test.specName index test)
    , [ Test.specName index test
            |> ModuleName.extendName moduleName
            |> moduleHeader suite
      , imports suite moduleName
      , suite.types
      , [ "" ]
      , List.map Function.toString suite.helperFunctions
      , [ "" ]
      , spec index test
      ]
        |> List.concat
        |> unlines
    )


moduleHeader : TestSuite -> ModuleName -> List String
moduleHeader { imports } moduleName =
    [ "module VerifyExamples." ++ ModuleName.toString moduleName ++ " exposing (..)"
    , ""
    , "-- This file got generated by [elm-verify-examples](https://github.com/stoeffel/elm-verify-examples)."
    , "-- Please don't modify this file by hand!"
    , ""
    ]


imports : TestSuite -> ModuleName -> List String
imports { imports } moduleName =
    [ "import Test"
    , "import Expect"
    , "import " ++ ModuleName.toString moduleName ++ " exposing(..)"
    , ""
    ]
        ++ imports
        ++ [ "" ]


spec : Int -> Test -> List String
spec index test =
    [ ""
    , ""
    , "spec" ++ toString index ++ " : Test.Test"
    , "spec" ++ toString index ++ " ="
    , indent 1 (testDefinition test)
    , indent 2 "\\() ->"
    , indent 3 "Expect.equal"
    ]
        ++ List.map (indent 4) (String.lines <| Test.specBody test)


todoIfEmpty : ModuleName -> List String -> List String
todoIfEmpty moduleName tests =
    case tests of
        [] ->
            todo moduleName

        _ ->
            tests


todo : ModuleName -> List String
todo moduleName =
    [ ""
    , ""
    , "spec : Test.Test"
    , "spec ="
    , indent 1 <|
        "Test.todo \"module "
            ++ ModuleName.toString moduleName
            ++ ": No examples to verify yet!\""
    ]


testDefinition : Test -> String
testDefinition test =
    String.concat
        [ "Test.test \""
        , Test.name test
        , ": \\n\\n"
        , Test.exampleDescription test
            |> String.lines
            |> List.map (indent 1 >> escape)
            |> String.join "\\n"
        , "\" <|"
        ]
